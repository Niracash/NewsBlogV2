@using System.Text.RegularExpressions
@using System.Net
@using X.PagedList.Mvc.Core
@using X.PagedList
@model NewsBlog.ViewModels.HomeViewModel

@{
    ViewData["Title"] = "Home";
}

<!-- Page Header-->
<div class="container-fluid">
    <header class="my-5">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="text-center mt-5">
                    <h1>@Model.Title</h1>
                    <span class="subheading">@Model.Description</span>
                </div>
            </div>
        </div>
    </header>
</div>
<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="input-group mb-3">
                <input type="text" id="searchInput" class="form-control" placeholder="Search Posts" value="@ViewBag.CurrentFilter" />
                <div class="input-group-append">
                    <button class="btn btn-primary" type="button" onclick="clearSearch()">Clear</button>
                </div>
            </div>

            <div id="postsContainer">
                @foreach (var post in Model.Posts!)
                {
                    <!-- Post preview-->
                    <div class="post-preview mb-5 shadow-lg p-4 bg-white rounded">
                        <a asp-controller="Content" asp-action="Article" asp-route-slug="@post.Slug">
                            @if (!string.IsNullOrEmpty(post.VideoUrl))
                            {
                                <div class="w-100 mb-3">
                                    <video width="100%" height="400" controls>
                                        <source src="~/videos/@post.VideoUrl" type="video/mp4">
                                        Your browser does not support the video tag.
                                    </video>
                                </div>
                            }
                            else if (!string.IsNullOrEmpty(post.ImageUrl))
                            {
                                <div class="w-100 mb-3">
                                    <img src="~/images/@post.ImageUrl" class="img-fluid rounded" style="object-fit:cover; height:400px; width:100%;">
                                </div>
                            }
                            @{
                                var decodedDescription = WebUtility.HtmlDecode(post.Description!);
                                var cleanDescription = Regex.Replace(decodedDescription, "<.*?>", String.Empty);
                                var displaySummary = cleanDescription.Length > 350
                                ? cleanDescription.Substring(0, 250) + "..."
                                : cleanDescription;
                            }
                            <h2 class="post-title">@post.Title</h2>
                            <h6 class="post-subtitle">@displaySummary</h6>
                        </a>
                        <p class="post-meta text-end" style="font-size: 0.8em;">
                            Posted by
                            <span style="font-weight: bold;">
                                @if (post.User != null)
                                {
                                    @($"{post.User.FirstName} {post.User.LastName}")
                                }
                                else
                                {
                                    @post.AuthorName
                                }
                            </span>
                            <br />
                            <small>@post.CreatedAt.ToString("MMMM dd, yyyy HH:mm")</small>
                        </p>
                    </div>
                    <hr class="my-4" />
                }
            </div>

            <div id="paginationContainer" class="d-flex justify-content-center">
                @Html.PagedListPager(Model.Posts, page => Url.Action("Index", new { page, searchString = ViewBag.CurrentFilter }), new PagedListRenderOptions
           {
               Display = PagedListDisplayMode.IfNeeded,
               DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
               DisplayLinkToNextPage = PagedListDisplayMode.Always,
               DisplayLinkToFirstPage = PagedListDisplayMode.Always,
               DisplayLinkToLastPage = PagedListDisplayMode.Always,
               UlElementClasses = new[] { "pagination", "justify-content-center" },
               LiElementClasses = new[] { "page-item" },
               PageClasses = new[] { "page-link" }
           })
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            $("#searchInput").on("keyup", function () {
                var value = $(this).val().toLowerCase();
                $.get('@Url.Action("Index", "Home")', { searchString: value }, function (data) {
                    var postsContainer = $(data).find("#postsContainer").html();
                    $("#postsContainer").html(postsContainer);
                    var paginationContainer = $(data).find("#paginationContainer").html();
                    $("#paginationContainer").html(paginationContainer);
                    if (value) {
                        history.pushState({}, '', '@Url.Action("Index", "Home")' + '?searchString=' + value);
                    } else {
                        history.pushState({}, '', '@Url.Action("Index", "Home")');
                    }
                });
            });

            function clearSearch() {
                $('#searchInput').val('');
                $('#searchInput').keyup();
            }
        });
    </script>
}
